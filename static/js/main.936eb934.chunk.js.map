{"version":3,"sources":["components/card-list/card/Card.jsx","components/card-list/CardList.jsx","components/search-box/SearchBox.jsx","components/scroll/Scroll.jsx","core/error/ErrorBoundry.js","redux/constants.js","components/header/Header.jsx","components/counter-button/CounterButton.jsx","containers/App.js","redux/actions.js","serviceWorker.js","redux/reducers.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","cardComponent","robots","map","robot","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","React","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAIL","Header","memo","console","log","CounterButton","useState","count","setCount","color","onClick","connect","searchRobots","requestRobots","isPending","err","dispatch","onSearchChange","event","text","target","value","payload","onRequestRobots","fetch","then","resp","json","data","catch","useEffect","filteredRobots","filter","toLowerCase","includes","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.936eb934.chunk.js","sourcesContent":["import React from 'react';\r\n// import * from './Card.css'\r\n\r\nconst Card = ({ id, name, email }) => {\r\n\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow shadow-5\">\r\n      <img src={`https://robohash.org/ass${id}`} alt=\"robot imagen\"></img>\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './card/Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  const cardComponent = robots.map((robot) => {\r\n    return <Card\r\n      key={robot.id}\r\n      id={robot.id}\r\n      name={robot.name}\r\n      email={robot.email}\r\n    />\r\n  })\r\n  \r\n  return <div>\r\n    {cardComponent}\r\n  </div>;\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input className=\"pa3 ba b--greeen bg-lightest-blue\" type=\"search\" placeholder=\"search robots\" onChange={searchChange}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport './Scroll.css';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{overflowY:'scroll', border: '3px solid black', height:'500px'}}>\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scroll;\r\n","import React from 'react';\r\n\r\nclass ErrorBoundry extends React.Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      hasError: false,\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({\r\n      hasError: true\r\n    })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Oops. That is not good</h1>\r\n    }\r\n    return this.props.children;\r\n  }\r\n\r\n}\r\n\r\nexport default ErrorBoundry;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAIL = 'REQUEST_ROBOTS_FAIL';","import React from 'react';\r\n\r\nconst Header = React.memo(() => {\r\n  console.log('Header');\r\n  return <h1 className=\"f1\">RoboFriends</h1>;\r\n});\r\n\r\nexport default Header;\r\n","import React, { useState } from 'react';\r\n\r\nconst CounterButton = React.memo((props) => {\r\n  const [count, setCount] = useState(0);\r\n  console.log('CounterButton', props);\r\n\r\n  return (\r\n    <button style={{ color: props.color }} onClick={() => setCount(count + 1)}>\r\n      Count: {count}\r\n    </button>\r\n  );\r\n});\r\n\r\nexport default CounterButton;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CardList from '../components/card-list/CardList';\r\nimport SearchBox from '../components/search-box/SearchBox';\r\nimport Scroll from '../components/scroll/Scroll'\r\n\r\nimport './App.css'\r\nimport ErrorBoundry from '../core/error/ErrorBoundry';\r\nimport { requestRobots, setSearchField,  } from '../redux/actions';\r\nimport Header from '../components/header/Header';\r\nimport CounterButton from '../components/counter-button/CounterButton';\r\n\r\n\r\nconst mapStateToProps = state => { \r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    err: state.requestRobots.err\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => { dispatch(setSearchField(event.target.value)) },\r\n    \r\n    // ** Vamos a sustituir el useEffect():\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n\r\n  }\r\n}\r\n\r\nfunction App (props) {\r\n  // const [robots, setRobots] = useState([]);\r\n  // const [searchfield, setSearchfield] = useState('');\r\n\r\n  useEffect(()=>props.onRequestRobots(),[])\r\n\r\n  // useEffect(() => {\r\n  //   fetch('https://jsonplaceholder.typicode.com/users')\r\n  //     .then(resp => resp.json())\r\n  //     .then(users => setRobots( users))\r\n  // },[]) // only run if [something] changes\r\n\r\n  // Recuerda que usamos un ARROW FUNCTION para que obtenga el THIS del \"sitio\" en el que se ha creado, NO de donde se invoca (en este caso en SearchBox Component)\r\n  // const onSearchChange = (event) => {\r\n  //   setSearchfield( event.target.value)\r\n  // }\r\n    \r\n  const filteredRobots = props.robots.filter((robots) =>\r\n    robots.name.toLowerCase().includes(props.searchField.toLowerCase())\r\n  );\r\n  \r\n  return props.isPending ? (\r\n    <h1>Loading ...</h1>\r\n  ) : (\r\n    <div className=\"tc\">\r\n        <Header></Header>\r\n        <CounterButton color={'blue'}></CounterButton>\r\n      <SearchBox searchChange={props.onSearchChange}></SearchBox>\r\n      <Scroll>\r\n        <ErrorBoundry>\r\n          <CardList robots={filteredRobots}></CardList>\r\n        </ErrorBoundry>\r\n      </Scroll>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAIL} from './constants';\r\n\r\nexport const setSearchField = (text) => (\r\n { type: CHANGE_SEARCH_FIELD, payload: text }\r\n)\r\n\r\nexport const requestRobots = () => (dispatch)=> {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then((resp) => resp.json())\r\n    .then((data) => dispatch({type:REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch((err) => dispatch({type:REQUEST_ROBOTS_FAIL, payload:err}))\r\n}\r\n  \r\n  \r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAIL,\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state,  {searchField: action.payload})\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  err: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, action, {\r\n        robots: action.payload,\r\n        isPending: false,\r\n      });\r\n    case REQUEST_ROBOTS_FAIL:\r\n      return Object.assign({}, state, {\r\n        err: action.payload,\r\n        isPending: false,\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\n\nimport * as serviceWorker from './serviceWorker'\n\n// ** Importamos REDUX\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport { requestRobots, searchRobots } from './redux/reducers';\n\nimport 'tachyons';\nimport './index.css';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\n\n// const store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App></App>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}